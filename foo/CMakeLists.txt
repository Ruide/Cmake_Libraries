# add_library allow specify static or shared lib. STATIC or SHARED between 2 params
# BUILD_SHARED_LIBS set to True then shared lib, False then static
add_library("${PROJECT_NAME}" "") # 2 params, name & src code file required to compile the lib. 
add_library(Foo::Foo ALIAS "${PROJECT_NAME}") # alias target allows us to refer to the Foo target as Foo::Foo

# specify target include directories
# generator expression: "$<key:value pair>" BUILD_INTERFACE is key, ${CMAKE_CURRENT_SOURCE_DIR}/include is value
# CMAKE_CURRENT_SOURCE_DIR means this directory
# generator expression means when we are in BUILD directory, "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>" evaluates to ${CMAKE_CURRENT_SOURCE_DIR}/include>
# if not in BUILD directory, "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>" evaluates to nothing
target_include_directories("${PROJECT_NAME}" PUBLIC # PROJECT_NAME variable to specify the target
	"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>" # build and intall directories have diff include directories
	# "$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>" # to include foo_export.h generated by generate_export_header during compilation
	"$<INSTALL_INTERFACE:include>" # because inlcude is a relative path, cmake would add ${CMAKE_INSTALL_PREFIX} in the beginning
) # these include directories are required to both link against and compile our target


#PRIVATE    Build Requirement: anything required to compile our target
#INTERFACE  Usage Requirement: anything required to link against our target
#PUBLIC     Both


# Foo-d # debug version
# Foo-s-d # static version
# Rename target Foo

if(NOT BUILD_SHARED_LIBS)
	set(STATIC_POSTFIX "-s")
	set_target_properties("${PROJECT_NAME}" PROPERTIES
	COMPILE_FLAGS _DFOO_STATIC_DEFINE)
endif()

set_target_properties("${PROJECT_NAME}" PROPERTIES
	DEBUG_POSSTFIX "${STATIC_POSTFIX}-d" # add -d whenever in debug build
	RELEASE_POSTFIX "${STATIC_POSTFIX}"
	MINSIZEREL_POSTFIX "${STATIC_POSTFIX}-mr"
	RELWITHDEBINFO_POSTFIX "${STATIC_POSTFIX}-rd"
)

# need the following only for windows dll
#include("GenerateExportHeader") # allows us to use GenerateExport Macro. Export our Library symbols. So others can include our library symbol and link to our lib.
#generate_export_header("${PROJECT_NAME}") # will create ${CMAKE_CURRENT_BINARY_DIR}/foo_export.h
#install(FILES "${CMAKE_CURRENT_BINARY_DIR}/foo_export.h" DESTINATION "include") # make install


add_subdirectory("include")
add_subdirectory("src")